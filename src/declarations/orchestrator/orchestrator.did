type ValidBroadcastersResponse = 
 variant {
   icrc75: ICRC75Item;
   list: vec principal;
 };
type TimerId = nat;
type Time = nat;
type SubscriptionUpdateResult = 
 opt variant {
       Err: SubscriptionUpdateError;
       Ok: bool;
     };
type SubscriptionUpdateRequest = 
 record {
   config: record {
             text;
             ICRC16__1;
           };
   memo: opt blob;
   subscriber: opt principal;
   subscription: variant {
                   id: nat;
                   namespace: text;
                 };
 };
type SubscriptionUpdateError = 
 variant {
   GenericBatchError: text;
   GenericError: GenericError;
   ImproperConfig: text;
   NotFound;
   Unauthorized;
 };
type SubscriptionRegistration = 
 record {
   config: ICRC16Map__1;
   memo: opt blob;
   namespace: text;
 };
type SubscriptionRegisterResult = 
 opt variant {
       Err: SubscriptionRegisterError;
       Ok: nat;
     };
type SubscriptionRegisterError = 
 variant {
   Exists: nat;
   GenericBatchError: text;
   GenericError: GenericError;
   ImproperConfig: text;
   PublicationNotFound;
   Unauthorized;
 };
type SubscriptionRecordShared = 
 record {
   controllers: vec principal;
   id: nat;
   initialConfig: ICRC16Map__4;
   namespace: text;
   publicationId: nat;
   stake: StakeRecord;
   subscribers: vec record {
                      principal;
                      SubscriberRecordShared;
                    };
 };
type SubscriptionRecord = 
 record {
   config: ICRC16Map__3;
   id: nat;
   namespace: text;
 };
type SubscriptionInfo = 
 record {
   config: ICRC16Map__1;
   namespace: text;
   stats: Stats;
   subscriptionId: nat;
 };
type SubscriptionIdentifier = 
 variant {
   namespace: text;
   subscriptionId: nat;
 };
type SubscriptionDeleteResult = 
 opt variant {
       Err: SubscriptionDeleteError;
       Ok: bool;
     };
type SubscriptionDeleteRequest = 
 record {
   memo: opt blob;
   subscriber: opt principal;
   subscription: SubscriptionIdentifier;
 };
type SubscriptionDeleteError = 
 variant {
   GenericBatchError: text;
   GenericError: GenericError;
   NotFound;
   Unauthorized;
 };
type SubscriberRecordShared = 
 record {
   bStopped: bool;
   filter: opt text;
   registeredBroadcasters: vec principal;
   skip: opt record {
               nat;
               nat;
             };
   stake: StakeRecord;
   subnet: opt principal;
   subscriber: principal;
   subscriptionId: nat;
 };
type SubscriberInfo = 
 record {
   config: ICRC16Map__1;
   stats: Stats;
   subscriber: principal;
   subscriptions: opt vec nat;
 };
type Stats__4 = 
 record {
   cycles: nat;
   expectedExecutionTime: opt Time;
   lastExecutionTime: Time;
   maxExecutions: nat;
   minAction: opt ActionDetail;
   nextActionId: nat;
   nextTimer: opt TimerId;
   timers: nat;
 };
type Stats__3 = 
 record {
   backlogs: vec record {
                   nat;
                   vec record {
                         nat;
                         EventNotification__1;
                       };
                 };
   broadcasters: vec record {
                       nat;
                       vec principal;
                     };
   confirmAccumulator: vec record {
                             principal;
                             vec nat;
                           };
   confirmTimer: opt nat;
   error: opt text;
   icrc72OrchestratorCanister: principal;
   lastEventId: vec record {
                      text;
                      vec record {
                            nat;
                            nat;
                          };
                    };
   readyForSubscription: bool;
   subscriptions: vec record {
                        nat;
                        SubscriptionRecord;
                      };
   tt: Stats__4;
   validBroadcasters: variant {
                        icrc75: ICRC75Item__1;
                        list: vec principal;
                      };
 };
type Stats__2 = 
 record {
   broadcasters: vec record {
                       text;
                       vec principal;
                     };
   drainEventId: opt ActionId__1;
   error: opt text;
   eventsProcessing: bool;
   icrc72OrchestratorCanister: principal;
   icrc72Subscriber: Stats__3;
   orchestrator: principal;
   pendingEvents: vec EmitableEvent;
   previousEventIds: vec record {
                           text;
                           record {
                             nat;
                             nat;
                           };
                         };
   publications: vec record {
                       nat;
                       PublicationRecord;
                     };
   readyForPublications: bool;
   tt: Stats__4;
 };
type Stats__1 = 
 record {
   broadcasters: vec record {
                       principal;
                       BroadcasterRecordShared;
                     };
   defaultTake: nat;
   icrc72Publisher: Stats__2;
   maxTake: nat;
   nextPublicationID: nat;
   nextSubscriptionID: nat;
   publications: vec record {
                       nat;
                       PublicationRecordShared;
                     };
   subnet: opt principal;
   subscriptions: vec record {
                        nat;
                        SubscriptionRecordShared;
                      };
   tt: Stats__4;
 };
type Stats = 
 vec record {
       text;
       ICRC16__1;
     };
type StatisticsFilter = opt opt vec text;
type StakeRecord = 
 record {
   "principal": opt principal;
   stake: nat;
   timestamp: nat;
 };
type PublisherRecordShared = 
 record {
   broadcasters: vec principal;
   subnet: opt principal;
 };
type PublisherInfo = 
 record {
   publisher: principal;
   stats: Stats;
 };
type PublicationUpdateResult = 
 opt variant {
       Err: PublicationUpdateError;
       Ok: bool;
     };
type PublicationUpdateRequest = 
 record {
   config: record {
             text;
             ICRC16__1;
           };
   memo: opt blob;
   publication: PublicationIdentifier;
 };
type PublicationUpdateError = 
 variant {
   GenericBatchError: text;
   GenericError: GenericError;
   ImproperConfig: text;
   NotFound;
   Unauthorized;
 };
type PublicationRegistration = 
 record {
   config: ICRC16Map__1;
   memo: opt blob;
   namespace: text;
 };
type PublicationRegisterResult = 
 opt variant {
       Err: PublicationRegisterError;
       Ok: nat;
     };
type PublicationRegisterError = 
 variant {
   Exists: nat;
   GenericBatchError: text;
   GenericError: GenericError;
   ImproperConfig: text;
   Unauthorized;
   UnauthorizedPublisher: record {namespace: Namespace;};
 };
type PublicationRecordShared = 
 record {
   allowedPublishers: opt PermissionSetShared;
   allowedSubscribers: opt PermissionSetShared;
   controllers: vec principal;
   id: nat;
   initialConfig: ICRC16Map__4;
   namespace: text;
   registeredPublishers: vec record {
                               principal;
                               PublisherRecordShared;
                             };
   subnetIndex: vec record {
                      principal;
                      principal;
                    };
 };
type PublicationRecord = 
 record {
   id: nat;
   namespace: text;
 };
type PublicationInfo = 
 record {
   config: ICRC16Map__1;
   namespace: text;
   publicationId: nat;
   stats: Stats;
 };
type PublicationIdentifier = 
 variant {
   namespace: text;
   publicationId: nat;
 };
type PublicationDeleteResult = 
 opt variant {
       Err: PublicationDeleteError;
       Ok: bool;
     };
type PublicationDeleteRequest = 
 record {
   memo: opt blob;
   publication: PublicationIdentifier;
 };
type PublicationDeleteError = 
 variant {
   GenericBatchError: text;
   GenericError: GenericError;
   NotFound;
   Unauthorized;
 };
type PermissionSetShared = 
 variant {
   allowed: vec principal;
   allowed_icrc75: record {
                     namespace: Namespace__2;
                     "principal": principal;
                   };
   disallowed: vec principal;
   disallowed_icrc75:
    record {
      namespace: Namespace__2;
      "principal": principal;
    };
 };
type OrchestrationQuerySlice = 
 variant {
   ByBroadcaster: principal;
   ByNamespace: text;
   ByPublisher: principal;
   BySubscriber: principal;
 };
type OrchestrationFilter = 
 record {
   slice: vec OrchestrationQuerySlice;
   statistics: StatisticsFilter;
 };
type Namespace__2 = text;
type Namespace__1 = text;
type Namespace = text;
type MVEvent = 
 service {
   broadcaster_ready: () -> ();
   file_subnet_broadcaster: (principal) -> ();
   file_subnet_canister: (principal, principal) -> ();
   get_stats: () -> (Stats__1) query;
   get_subnet_for_canister: (record {"principal": opt principal;}) ->
    (variant {
       Err: text;
       Ok: record {subnet_id: opt principal;};
     }) query;
   hello: () -> (text);
   icrc72_delete_publication: (vec PublicationDeleteRequest) ->
    (vec PublicationDeleteResult);
   icrc72_delete_subscription: (vec SubscriptionDeleteRequest) ->
    (vec SubscriptionDeleteResult);
   icrc72_get_broadcasters:
    (record {
       filter: opt OrchestrationFilter;
       prev: opt principal;
       take: opt nat;
     }) -> (vec BroadcasterInfo) query;
   icrc72_get_publications:
    (record {
       filter: opt OrchestrationFilter;
       prev: opt text;
       take: opt nat;
     }) -> (vec PublicationInfo) query;
   icrc72_get_publishers:
    (record {
       filter: opt OrchestrationFilter;
       prev: opt principal;
       take: opt nat;
     }) -> (vec PublisherInfo) query;
   icrc72_get_subscribers:
    (record {
       filter: opt OrchestrationFilter;
       prev: opt principal;
       take: opt nat;
     }) -> (vec SubscriberInfo) query;
   icrc72_get_subscriptions:
    (record {
       filter: opt OrchestrationFilter;
       prev: opt text;
       take: opt nat;
     }) -> (vec SubscriptionInfo) query;
   icrc72_get_valid_broadcaster: () -> (ValidBroadcastersResponse);
   icrc72_handle_notification: (vec EventNotification) -> () oneway;
   icrc72_register_publication: (vec PublicationRegistration) ->
    (vec PublicationRegisterResult);
   icrc72_register_subscription: (vec SubscriptionRegistration) ->
    (vec SubscriptionRegisterResult);
   icrc72_update_publication: (vec PublicationUpdateRequest) ->
    (vec PublicationUpdateResult);
   icrc72_update_subscription: (vec SubscriptionUpdateRequest) ->
    (vec SubscriptionUpdateResult);
 };
type InitArgs__2 = record {name: text;};
type InitArgs__1 = record {
                     restore:
                      opt
                       record {
                         pendingEvents: vec EmitableEvent;
                         previousEventIDs:
                          vec record {
                                text;
                                record {
                                  nat;
                                  nat;
                                };
                              };
                       };};
type InitArgs = record {name: text;};
type ICRC75Item__1 = 
 record {
   namespace: Namespace__1;
   "principal": principal;
 };
type ICRC75Item = 
 record {
   namespace: Namespace;
   "principal": principal;
 };
type ICRC16__4 = 
 variant {
   Array: vec ICRC16__4;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec ICRC16Property__4;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: vec record {
              text;
              ICRC16__4;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt ICRC16__4;
   Principal: principal;
   Set: vec ICRC16__4;
   Text: text;
   ValueMap: vec record {
                   ICRC16__4;
                   ICRC16__4;
                 };
 };
type ICRC16__3 = 
 variant {
   Array: vec ICRC16__3;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec ICRC16Property__3;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: vec record {
              text;
              ICRC16__3;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt ICRC16__3;
   Principal: principal;
   Set: vec ICRC16__3;
   Text: text;
   ValueMap: vec record {
                   ICRC16__3;
                   ICRC16__3;
                 };
 };
type ICRC16__2 = 
 variant {
   Array: vec ICRC16__2;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec ICRC16Property__2;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: ICRC16Map__2;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt ICRC16__2;
   Principal: principal;
   Set: vec ICRC16__2;
   Text: text;
   ValueMap: vec record {
                   ICRC16__2;
                   ICRC16__2;
                 };
 };
type ICRC16__1 = 
 variant {
   Array: vec ICRC16__1;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec ICRC16Property__1;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: ICRC16Map__1;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt ICRC16__1;
   Principal: principal;
   Set: vec ICRC16__1;
   Text: text;
   ValueMap: vec record {
                   ICRC16__1;
                   ICRC16__1;
                 };
 };
type ICRC16Property__4 = 
 record {
   immutable: bool;
   name: text;
   value: ICRC16__4;
 };
type ICRC16Property__3 = 
 record {
   immutable: bool;
   name: text;
   value: ICRC16__3;
 };
type ICRC16Property__2 = 
 record {
   immutable: bool;
   name: text;
   value: ICRC16__2;
 };
type ICRC16Property__1 = 
 record {
   immutable: bool;
   name: text;
   value: ICRC16__1;
 };
type ICRC16Property = 
 record {
   immutable: bool;
   name: text;
   value: ICRC16;
 };
type ICRC16Map__4 = 
 vec record {
       text;
       ICRC16__4;
     };
type ICRC16Map__3 = 
 vec record {
       text;
       ICRC16__3;
     };
type ICRC16Map__2 = 
 vec record {
       text;
       ICRC16__2;
     };
type ICRC16Map__1 = 
 vec record {
       text;
       ICRC16__1;
     };
type ICRC16Map = 
 vec record {
       text;
       ICRC16;
     };
type ICRC16 = 
 variant {
   Array: vec ICRC16;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec ICRC16Property;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: vec record {
              text;
              ICRC16;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt ICRC16;
   Principal: principal;
   Set: vec ICRC16;
   Text: text;
   ValueMap: vec record {
                   ICRC16;
                   ICRC16;
                 };
 };
type GenericError = 
 record {
   error_code: nat;
   message: text;
 };
type EventNotification__1 = 
 record {
   data: ICRC16__3;
   eventId: nat;
   filter: opt text;
   headers: opt ICRC16Map__3;
   id: nat;
   namespace: text;
   prevEventId: opt nat;
   source: principal;
   timestamp: nat;
 };
type EventNotification = 
 record {
   data: ICRC16__2;
   eventId: nat;
   filter: opt text;
   headers: opt ICRC16Map__2;
   id: nat;
   namespace: text;
   prevEventId: opt nat;
   source: principal;
   timestamp: nat;
 };
type EmitableEvent = 
 record {
   broadcaster: principal;
   data: ICRC16;
   headers: opt ICRC16Map;
   id: nat;
   namespace: text;
   prevId: opt nat;
   source: principal;
   timestamp: nat;
 };
type BroadcasterRecordShared = 
 record {
   publishers: vec record {
                     principal;
                     vec text;
                   };
   relays:
    vec
     record {
       text;
       record {
         vec record {
               principal;
               vec principal;
             };
         vec record {
               StakeRecord;
               record {
                 principal;
                 principal;
               };
             };
       };
     };
   subnet: principal;
   subscribers:
    vec
     record {
       text;
       record {
         vec principal;
         vec record {
               StakeRecord;
               principal;
             };
       };
     };
 };
type BroadcasterInfo = 
 record {
   broadcaster: principal;
   stats: Stats;
 };
type Args = opt ArgList;
type ArgList = 
 record {
   expectedExecutionTime: Time;
   initialTimers: vec record {
                        ActionId;
                        Action;
                      };
   lastActionIdReported: opt nat;
   lastCycleReport: opt nat;
   lastExecutionTime: Time;
   maxExecutions: opt nat;
   nextActionId: nat;
   nextCycleActionId: opt nat;
 };
type ActionId__1 = 
 record {
   id: nat;
   time: Time;
 };
type ActionId = 
 record {
   id: nat;
   time: Time;
 };
type ActionDetail = 
 record {
   ActionId;
   Action;
 };
type Action = 
 record {
   aSync: opt nat;
   actionType: text;
   params: blob;
   retries: nat;
 };
service : (opt
            record {
              icrc72OrchestratorArgs: opt InitArgs;
              icrc72PublisherArgs: opt InitArgs__1;
              icrc72SubscriberArgs: opt InitArgs__2;
              ttArgs: opt Args;
            }) -> MVEvent
